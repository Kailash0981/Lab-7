#include <bits/stdc++.h>
using namespace std;

struct Item {
    int profit, weight;
};

// ---------- Comparators ----------
bool cmpProfit(Item a, Item b) {
    return a.profit > b.profit;  // sort by profit (descending)
}

bool cmpWeight(Item a, Item b) {
    return a.weight < b.weight;  // sort by weight (ascending)
}

bool cmpRatio(Item a, Item b) {
    double r1 = (double)a.profit / a.weight;
    double r2 = (double)b.profit / b.weight;
    return r1 > r2;  // sort by profit/weight ratio (descending)
}

// ---------- Greedy Fractional Knapsack ----------
double fractionalKnapsack(int W, Item arr[], int n, int method) {
    if (method == 1)
        sort(arr, arr + n, cmpProfit);
    else if (method == 2)
        sort(arr, arr + n, cmpWeight);
    else
        sort(arr, arr + n, cmpRatio);

    double finalProfit = 0.0;

    for (int i = 0; i < n; i++) {
        if (arr[i].weight <= W) {
            W -= arr[i].weight;
            finalProfit += arr[i].profit;
        } else {
            finalProfit += arr[i].profit * ((double)W / arr[i].weight);
            break;
        }
    }
    return finalProfit;
}

int main() {
    int W = 50;  // Knapsack capacity
    Item arr[] = {{60, 10}, {100, 20}, {120, 30}};
    int n = sizeof(arr) / sizeof(arr[0]);

    cout << "Method 1 (By Profit): " 
         << fractionalKnapsack(W, arr, n, 1) << endl;

    cout << "Method 2 (By Weight): " 
         << fractionalKnapsack(W, arr, n, 2) << endl;

    cout << "Method 3 (By Ratio): " 
         << fractionalKnapsack(W, arr, n, 3) << endl;

    return 0;
}